/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Mon Dec 22 14:39:49 CST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkRFile_h__
#define __mkRFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRFile module */
class MOD_mkRFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt32> INST_rfile_0;
  MOD_ConfigReg<tUInt32> INST_rfile_1;
  MOD_ConfigReg<tUInt32> INST_rfile_10;
  MOD_ConfigReg<tUInt32> INST_rfile_11;
  MOD_ConfigReg<tUInt32> INST_rfile_12;
  MOD_ConfigReg<tUInt32> INST_rfile_13;
  MOD_ConfigReg<tUInt32> INST_rfile_14;
  MOD_ConfigReg<tUInt32> INST_rfile_15;
  MOD_ConfigReg<tUInt32> INST_rfile_16;
  MOD_ConfigReg<tUInt32> INST_rfile_17;
  MOD_ConfigReg<tUInt32> INST_rfile_18;
  MOD_ConfigReg<tUInt32> INST_rfile_19;
  MOD_ConfigReg<tUInt32> INST_rfile_2;
  MOD_ConfigReg<tUInt32> INST_rfile_20;
  MOD_ConfigReg<tUInt32> INST_rfile_21;
  MOD_ConfigReg<tUInt32> INST_rfile_22;
  MOD_ConfigReg<tUInt32> INST_rfile_23;
  MOD_ConfigReg<tUInt32> INST_rfile_24;
  MOD_ConfigReg<tUInt32> INST_rfile_25;
  MOD_ConfigReg<tUInt32> INST_rfile_26;
  MOD_ConfigReg<tUInt32> INST_rfile_27;
  MOD_ConfigReg<tUInt32> INST_rfile_28;
  MOD_ConfigReg<tUInt32> INST_rfile_29;
  MOD_ConfigReg<tUInt32> INST_rfile_3;
  MOD_ConfigReg<tUInt32> INST_rfile_30;
  MOD_ConfigReg<tUInt32> INST_rfile_31;
  MOD_ConfigReg<tUInt32> INST_rfile_4;
  MOD_ConfigReg<tUInt32> INST_rfile_5;
  MOD_ConfigReg<tUInt32> INST_rfile_6;
  MOD_ConfigReg<tUInt32> INST_rfile_7;
  MOD_ConfigReg<tUInt32> INST_rfile_8;
  MOD_ConfigReg<tUInt32> INST_rfile_9;
 
 /* Constructor */
 public:
  MOD_mkRFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_wr;
  tUInt8 PORT_wr_rindx;
  tUInt32 PORT_wr_data;
  tUInt8 PORT_rd1_rindx;
  tUInt8 PORT_rd2_rindx;
  tUInt8 PORT_RDY_wr;
  tUInt32 PORT_rd1;
  tUInt8 PORT_RDY_rd1;
  tUInt32 PORT_rd2;
  tUInt8 PORT_RDY_rd2;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_wr;
  tUInt8 DEF_CAN_FIRE_rd2;
  tUInt8 DEF_CAN_FIRE_rd1;
  tUInt8 DEF_CAN_FIRE_wr;
 
 /* Local definitions */
 private:
  tUInt32 DEF__read__h2125;
  tUInt32 DEF__read__h2087;
  tUInt32 DEF__read__h2049;
  tUInt32 DEF__read__h2011;
  tUInt32 DEF__read__h1973;
  tUInt32 DEF__read__h1935;
  tUInt32 DEF__read__h1897;
  tUInt32 DEF__read__h1859;
  tUInt32 DEF__read__h1821;
  tUInt32 DEF__read__h1783;
  tUInt32 DEF__read__h1745;
  tUInt32 DEF__read__h1707;
  tUInt32 DEF__read__h1669;
  tUInt32 DEF__read__h1631;
  tUInt32 DEF__read__h1593;
  tUInt32 DEF__read__h1555;
  tUInt32 DEF__read__h1517;
  tUInt32 DEF__read__h1479;
  tUInt32 DEF__read__h1441;
  tUInt32 DEF__read__h1403;
  tUInt32 DEF__read__h1365;
  tUInt32 DEF__read__h1327;
  tUInt32 DEF__read__h1289;
  tUInt32 DEF__read__h1251;
  tUInt32 DEF__read__h1213;
  tUInt32 DEF__read__h1175;
  tUInt32 DEF__read__h1137;
  tUInt32 DEF__read__h1099;
  tUInt32 DEF__read__h1061;
  tUInt32 DEF__read__h1023;
  tUInt32 DEF__read__h985;
  tUInt32 DEF__read__h947;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  void METH_wr(tUInt8 ARG_wr_rindx, tUInt32 ARG_wr_data);
  tUInt8 METH_RDY_wr();
  tUInt32 METH_rd1(tUInt8 ARG_rd1_rindx);
  tUInt8 METH_RDY_rd1();
  tUInt32 METH_rd2(tUInt8 ARG_rd2_rindx);
  tUInt8 METH_RDY_rd2();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRFile &backing);
};

#endif /* ifndef __mkRFile_h__ */
