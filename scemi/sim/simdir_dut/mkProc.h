/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Mon Dec 22 14:39:49 CST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkProc_h__
#define __mkProc_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkCop.h"
#include "mkDMemory.h"
#include "mkIMemory.h"
#include "mkRFile.h"
#include "module_exec.h"
#include "module_decode.h"


/* Class declaration for the mkProc module */
class MOD_mkProc : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkCop INST_cop;
  MOD_mkDMemory INST_dMem;
  MOD_mkIMemory INST_iMem;
  MOD_Reg<tUInt32> INST_ir;
  MOD_Reg<tUInt32> INST_pc;
  MOD_mkRFile INST_rf;
  MOD_Reg<tUInt8> INST_state;
  MOD_module_exec INST_instance_exec_1;
  MOD_module_decode INST_instance_decode_0;
 
 /* Constructor */
 public:
  MOD_mkProc(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_cpuToHost;
  tUInt8 PORT_EN_hostToCpu;
  tUInt8 PORT_EN_iMemInit_request_put;
  tUInt8 PORT_EN_dMemInit_request_put;
  tUInt32 PORT_hostToCpu_startpc;
  tUWide PORT_iMemInit_request_put;
  tUWide PORT_dMemInit_request_put;
  tUInt64 PORT_cpuToHost;
  tUInt8 PORT_RDY_cpuToHost;
  tUInt8 PORT_RDY_hostToCpu;
  tUInt8 PORT_RDY_iMemInit_request_put;
  tUInt8 PORT_iMemInit_done;
  tUInt8 PORT_RDY_iMemInit_done;
  tUInt8 PORT_RDY_dMemInit_request_put;
  tUInt8 PORT_dMemInit_done;
  tUInt8 PORT_RDY_dMemInit_done;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_dMemInit_request_put;
  tUInt8 DEF_WILL_FIRE_iMemInit_request_put;
  tUInt8 DEF_WILL_FIRE_hostToCpu;
  tUInt8 DEF_WILL_FIRE_cpuToHost;
  tUInt8 DEF_CAN_FIRE_dMemInit_done;
  tUInt8 DEF_CAN_FIRE_dMemInit_request_put;
  tUInt8 DEF_CAN_FIRE_iMemInit_done;
  tUInt8 DEF_CAN_FIRE_iMemInit_request_put;
  tUInt8 DEF_CAN_FIRE_hostToCpu;
  tUInt8 DEF_CAN_FIRE_cpuToHost;
  tUInt8 DEF_WILL_FIRE_RL_doExecute;
  tUInt8 DEF_CAN_FIRE_RL_doExecute;
  tUInt8 DEF_WILL_FIRE_RL_doFetch;
  tUInt8 DEF_CAN_FIRE_RL_doFetch;
  tUWide DEF_exec___d331;
  tUWide DEF_decode_05_BITS_64_TO_54_06_CONCAT_decode_05_BI_ETC___d323;
  tUInt32 DEF_rVal1__h1414;
  tUInt32 DEF_rVal2__h1415;
  tUInt32 DEF_pc___d7;
  tUInt32 DEF_copVal__h1416;
  tUWide DEF_decode___d305;
  tUInt32 DEF_inst__h1412;
  tUInt8 DEF_rindx__h1774;
  tUInt8 DEF_rindx__h1806;
  tUInt8 DEF_cop_started____d2;
  tUInt8 DEF_dMem_init_done____d373;
  tUInt8 DEF_iMem_init_done____d372;
  tUInt32 DEF_decode_05_BITS_31_TO_0___d319;
  tUInt8 DEF_decode_05_BITS_52_TO_47___d308;
  tUInt8 DEF_decode_05_BITS_45_TO_40___d312;
  tUInt8 DEF_decode_05_BITS_38_TO_33___d315;
  tUInt8 DEF_decode_05_BITS_44_TO_40___d324;
  tUInt8 DEF_decode_05_BITS_37_TO_33___d327;
  tUInt8 DEF_exec_31_BITS_76_TO_73___d332;
  tUInt8 DEF_exec_31_BIT_72___d339;
  tUInt8 DEF_exec_31_BIT_71___d341;
  tUInt8 DEF_decode_05_BIT_53___d307;
  tUInt8 DEF_decode_05_BIT_46___d311;
  tUInt8 DEF_decode_05_BIT_39___d314;
  tUInt8 DEF_decode_05_BIT_32___d318;
  tUInt8 DEF_exec_31_BITS_76_TO_73_32_EQ_2___d333;
  tUInt8 DEF_exec_31_BITS_76_TO_73_32_EQ_3___d335;
  tUInt8 DEF_NOT_exec_31_BITS_76_TO_73_32_EQ_2_33___d343;
 
 /* Local definitions */
 private:
  tUWide DEF_dMemInit_request_put_BIT_64_79_CONCAT_IF_dMemI_ETC___d382;
  tUWide DEF_iMemInit_request_put_BIT_64_75_CONCAT_IF_iMemI_ETC___d378;
  tUWide DEF_NOT_exec_31_BITS_76_TO_73_32_EQ_2_33_43_CONCAT_ETC___d358;
 
 /* Rules */
 public:
  void RL_doFetch();
  void RL_doExecute();
 
 /* Methods */
 public:
  tUInt64 METH_cpuToHost();
  tUInt8 METH_RDY_cpuToHost();
  void METH_hostToCpu(tUInt32 ARG_hostToCpu_startpc);
  tUInt8 METH_RDY_hostToCpu();
  void METH_iMemInit_request_put(tUWide ARG_iMemInit_request_put);
  tUInt8 METH_RDY_iMemInit_request_put();
  tUInt8 METH_iMemInit_done();
  tUInt8 METH_RDY_iMemInit_done();
  void METH_dMemInit_request_put(tUWide ARG_dMemInit_request_put);
  tUInt8 METH_RDY_dMemInit_request_put();
  tUInt8 METH_dMemInit_done();
  tUInt8 METH_RDY_dMemInit_done();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkProc &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkProc &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkProc &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkProc &backing);
};

#endif /* ifndef __mkProc_h__ */
