/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Mon Dec 22 14:39:49 CST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "module_aluBr.h"


/* Constructor */
MOD_module_aluBr::MOD_module_aluBr(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent)
{
  PORT_aluBr_a = 0u;
  PORT_aluBr_b = 0u;
  PORT_aluBr_brFunc = 0u;
  PORT_aluBr = false;
  PORT_RDY_aluBr = false;
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_module_aluBr::init_symbols_0()
{
  init_symbol(&symbols[0u], "aluBr", SYM_PORT, &PORT_aluBr, 1u);
  init_symbol(&symbols[1u], "aluBr_a", SYM_PORT, &PORT_aluBr_a, 32u);
  init_symbol(&symbols[2u], "aluBr_b", SYM_PORT, &PORT_aluBr_b, 32u);
  init_symbol(&symbols[3u], "aluBr_brFunc", SYM_PORT, &PORT_aluBr_brFunc, 3u);
  init_symbol(&symbols[4u], "CAN_FIRE_aluBr", SYM_DEF, &DEF_CAN_FIRE_aluBr, 1u);
  init_symbol(&symbols[5u], "RDY_aluBr", SYM_PORT, &PORT_RDY_aluBr, 1u);
}


/* Rule actions */


/* Methods */

tUInt8 MOD_module_aluBr::METH_aluBr(tUInt32 ARG_aluBr_a,
				    tUInt32 ARG_aluBr_b,
				    tUInt8 ARG_aluBr_brFunc)
{
  tUInt8 DEF_aluBr_a_EQ_aluBr_b___d2;
  tUInt8 DEF_NOT_aluBr_a_BIT_31___d10;
  tUInt8 DEF_aluBr_brFunc_EQ_6___d13;
  tUInt8 DEF_NOT_aluBr_a_SLE_0___d12;
  tUInt8 DEF_aluBr_a_SLE_0___d6;
  tUInt8 DEF_NOT_aluBr_a_EQ_aluBr_b___d4;
  tUInt8 DEF_aluBr_a_BIT_31___d8;
  PORT_aluBr_a = ARG_aluBr_a;
  PORT_aluBr_b = ARG_aluBr_b;
  PORT_aluBr_brFunc = ARG_aluBr_brFunc;
  DEF_aluBr_a_BIT_31___d8 = (tUInt8)(ARG_aluBr_a >> 31u);
  DEF_aluBr_a_SLE_0___d6 = primSLE8(1u, 32u, (tUInt32)(ARG_aluBr_a), 32u, 0u);
  DEF_NOT_aluBr_a_SLE_0___d12 = !DEF_aluBr_a_SLE_0___d6;
  DEF_aluBr_brFunc_EQ_6___d13 = ARG_aluBr_brFunc == (tUInt8)6u;
  DEF_NOT_aluBr_a_BIT_31___d10 = !DEF_aluBr_a_BIT_31___d8;
  DEF_aluBr_a_EQ_aluBr_b___d2 = ARG_aluBr_a == ARG_aluBr_b;
  DEF_NOT_aluBr_a_EQ_aluBr_b___d4 = !DEF_aluBr_a_EQ_aluBr_b___d2;
  switch (ARG_aluBr_brFunc) {
  case (tUInt8)0u:
    PORT_aluBr = DEF_aluBr_a_EQ_aluBr_b___d2;
    break;
  case (tUInt8)1u:
    PORT_aluBr = DEF_NOT_aluBr_a_EQ_aluBr_b___d4;
    break;
  case (tUInt8)2u:
    PORT_aluBr = DEF_aluBr_a_SLE_0___d6;
    break;
  case (tUInt8)3u:
    PORT_aluBr = DEF_aluBr_a_BIT_31___d8;
    break;
  case (tUInt8)4u:
    PORT_aluBr = DEF_NOT_aluBr_a_BIT_31___d10;
    break;
  case (tUInt8)5u:
    PORT_aluBr = DEF_NOT_aluBr_a_SLE_0___d12;
    break;
  default:
    PORT_aluBr = DEF_aluBr_brFunc_EQ_6___d13;
  }
  return PORT_aluBr;
}

tUInt8 MOD_module_aluBr::METH_RDY_aluBr()
{
  DEF_CAN_FIRE_aluBr = (tUInt8)1u;
  PORT_RDY_aluBr = DEF_CAN_FIRE_aluBr;
  return PORT_RDY_aluBr;
}


/* Reset routines */


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */


/* State dumping routine */
void MOD_module_aluBr::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_module_aluBr::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_aluBr", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_aluBr", 1u);
  vcd_write_def(sim_hdl, num++, "aluBr", 1u);
  vcd_write_def(sim_hdl, num++, "aluBr_a", 32u);
  vcd_write_def(sim_hdl, num++, "aluBr_b", 32u);
  vcd_write_def(sim_hdl, num++, "aluBr_brFunc", 3u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_module_aluBr::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_module_aluBr &backing)
{
  vcd_defs(dt, backing);
}

void MOD_module_aluBr::vcd_defs(tVCDDumpType dt, MOD_module_aluBr &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 3u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_aluBr) != DEF_CAN_FIRE_aluBr)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_aluBr, 1u);
	backing.DEF_CAN_FIRE_aluBr = DEF_CAN_FIRE_aluBr;
      }
      ++num;
      if ((backing.PORT_RDY_aluBr) != PORT_RDY_aluBr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_aluBr, 1u);
	backing.PORT_RDY_aluBr = PORT_RDY_aluBr;
      }
      ++num;
      if ((backing.PORT_aluBr) != PORT_aluBr)
      {
	vcd_write_val(sim_hdl, num, PORT_aluBr, 1u);
	backing.PORT_aluBr = PORT_aluBr;
      }
      ++num;
      if ((backing.PORT_aluBr_a) != PORT_aluBr_a)
      {
	vcd_write_val(sim_hdl, num, PORT_aluBr_a, 32u);
	backing.PORT_aluBr_a = PORT_aluBr_a;
      }
      ++num;
      if ((backing.PORT_aluBr_b) != PORT_aluBr_b)
      {
	vcd_write_val(sim_hdl, num, PORT_aluBr_b, 32u);
	backing.PORT_aluBr_b = PORT_aluBr_b;
      }
      ++num;
      if ((backing.PORT_aluBr_brFunc) != PORT_aluBr_brFunc)
      {
	vcd_write_val(sim_hdl, num, PORT_aluBr_brFunc, 3u);
	backing.PORT_aluBr_brFunc = PORT_aluBr_brFunc;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_aluBr, 1u);
      backing.DEF_CAN_FIRE_aluBr = DEF_CAN_FIRE_aluBr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_aluBr, 1u);
      backing.PORT_RDY_aluBr = PORT_RDY_aluBr;
      vcd_write_val(sim_hdl, num++, PORT_aluBr, 1u);
      backing.PORT_aluBr = PORT_aluBr;
      vcd_write_val(sim_hdl, num++, PORT_aluBr_a, 32u);
      backing.PORT_aluBr_a = PORT_aluBr_a;
      vcd_write_val(sim_hdl, num++, PORT_aluBr_b, 32u);
      backing.PORT_aluBr_b = PORT_aluBr_b;
      vcd_write_val(sim_hdl, num++, PORT_aluBr_brFunc, 3u);
      backing.PORT_aluBr_brFunc = PORT_aluBr_brFunc;
    }
}
