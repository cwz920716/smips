/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Mon Dec 22 14:39:49 CST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "module_alu.h"


/* Constructor */
MOD_module_alu::MOD_module_alu(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent)
{
  PORT_alu_a = 0u;
  PORT_alu_b = 0u;
  PORT_alu_func = 0u;
  PORT_alu = 0u;
  PORT_RDY_alu = false;
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_module_alu::init_symbols_0()
{
  init_symbol(&symbols[0u], "alu", SYM_PORT, &PORT_alu, 32u);
  init_symbol(&symbols[1u], "alu_a", SYM_PORT, &PORT_alu_a, 32u);
  init_symbol(&symbols[2u], "alu_b", SYM_PORT, &PORT_alu_b, 32u);
  init_symbol(&symbols[3u], "alu_func", SYM_PORT, &PORT_alu_func, 4u);
  init_symbol(&symbols[4u], "CAN_FIRE_alu", SYM_DEF, &DEF_CAN_FIRE_alu, 1u);
  init_symbol(&symbols[5u], "RDY_alu", SYM_PORT, &PORT_RDY_alu, 1u);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_module_alu::METH_alu(tUInt32 ARG_alu_a, tUInt32 ARG_alu_b, tUInt8 ARG_alu_func)
{
  tUInt32 DEF_alu_a_PLUS_alu_b___d2;
  tUInt8 DEF_x__h104;
  tUInt8 DEF_x__h96;
  tUInt32 DEF_alu_a_SL_alu_b_BITS_4_TO_0_0___d21;
  tUInt32 DEF_alu_a_SRA_alu_b_BITS_4_TO_0_0___d24;
  tUInt32 DEF_alu_a_SRL_alu_b_BITS_4_TO_0_0___d23;
  tUInt32 DEF__0_CONCAT_alu_a_ULT_alu_b_7___d18;
  tUInt32 DEF__0_CONCAT_alu_a_SLT_alu_b_4___d15;
  tUInt32 DEF_INV_alu_a_OR_alu_b___d12;
  tUInt32 DEF_alu_a_XOR_alu_b___d10;
  tUInt32 DEF_x__h85;
  tUInt32 DEF_alu_a_AND_alu_b___d6;
  tUInt32 DEF_alu_a_MINUS_alu_b___d4;
  tUInt8 DEF_c__h206;
  PORT_alu_a = ARG_alu_a;
  PORT_alu_b = ARG_alu_b;
  PORT_alu_func = ARG_alu_func;
  DEF_c__h206 = (tUInt8)((tUInt8)31u & ARG_alu_b);
  DEF_alu_a_MINUS_alu_b___d4 = ARG_alu_a - ARG_alu_b;
  DEF_alu_a_AND_alu_b___d6 = ARG_alu_a & ARG_alu_b;
  DEF_x__h85 = ARG_alu_a | ARG_alu_b;
  DEF_alu_a_XOR_alu_b___d10 = ARG_alu_a ^ ARG_alu_b;
  DEF_INV_alu_a_OR_alu_b___d12 = ~DEF_x__h85;
  DEF_alu_a_SRL_alu_b_BITS_4_TO_0_0___d23 = primShiftR32(32u,
							 32u,
							 (tUInt32)(ARG_alu_a),
							 5u,
							 (tUInt8)(DEF_c__h206));
  DEF_x__h96 = primSLT8(1u, 32u, (tUInt32)(ARG_alu_a), 32u, (tUInt32)(ARG_alu_b));
  DEF__0_CONCAT_alu_a_SLT_alu_b_4___d15 = (tUInt32)(DEF_x__h96);
  DEF_alu_a_SRA_alu_b_BITS_4_TO_0_0___d24 = primShiftRA32(32u,
							  32u,
							  (tUInt32)(ARG_alu_a),
							  5u,
							  (tUInt8)(DEF_c__h206));
  DEF_x__h104 = ARG_alu_a < ARG_alu_b;
  DEF__0_CONCAT_alu_a_ULT_alu_b_7___d18 = (tUInt32)(DEF_x__h104);
  DEF_alu_a_SL_alu_b_BITS_4_TO_0_0___d21 = primShiftL32(32u,
							32u,
							(tUInt32)(ARG_alu_a),
							5u,
							(tUInt8)(DEF_c__h206));
  DEF_alu_a_PLUS_alu_b___d2 = ARG_alu_a + ARG_alu_b;
  switch (ARG_alu_func) {
  case (tUInt8)0u:
    PORT_alu = DEF_alu_a_PLUS_alu_b___d2;
    break;
  case (tUInt8)1u:
    PORT_alu = DEF_alu_a_MINUS_alu_b___d4;
    break;
  case (tUInt8)2u:
    PORT_alu = DEF_alu_a_AND_alu_b___d6;
    break;
  case (tUInt8)3u:
    PORT_alu = DEF_x__h85;
    break;
  case (tUInt8)4u:
    PORT_alu = DEF_alu_a_XOR_alu_b___d10;
    break;
  case (tUInt8)5u:
    PORT_alu = DEF_INV_alu_a_OR_alu_b___d12;
    break;
  case (tUInt8)6u:
    PORT_alu = DEF__0_CONCAT_alu_a_SLT_alu_b_4___d15;
    break;
  case (tUInt8)7u:
    PORT_alu = DEF__0_CONCAT_alu_a_ULT_alu_b_7___d18;
    break;
  case (tUInt8)8u:
    PORT_alu = DEF_alu_a_SL_alu_b_BITS_4_TO_0_0___d21;
    break;
  case (tUInt8)9u:
    PORT_alu = DEF_alu_a_SRL_alu_b_BITS_4_TO_0_0___d23;
    break;
  default:
    PORT_alu = DEF_alu_a_SRA_alu_b_BITS_4_TO_0_0___d24;
  }
  return PORT_alu;
}

tUInt8 MOD_module_alu::METH_RDY_alu()
{
  DEF_CAN_FIRE_alu = (tUInt8)1u;
  PORT_RDY_alu = DEF_CAN_FIRE_alu;
  return PORT_RDY_alu;
}


/* Reset routines */


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */


/* State dumping routine */
void MOD_module_alu::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_module_alu::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_alu", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_alu", 1u);
  vcd_write_def(sim_hdl, num++, "alu", 32u);
  vcd_write_def(sim_hdl, num++, "alu_a", 32u);
  vcd_write_def(sim_hdl, num++, "alu_b", 32u);
  vcd_write_def(sim_hdl, num++, "alu_func", 4u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_module_alu::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_module_alu &backing)
{
  vcd_defs(dt, backing);
}

void MOD_module_alu::vcd_defs(tVCDDumpType dt, MOD_module_alu &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_alu) != DEF_CAN_FIRE_alu)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_alu, 1u);
	backing.DEF_CAN_FIRE_alu = DEF_CAN_FIRE_alu;
      }
      ++num;
      if ((backing.PORT_RDY_alu) != PORT_RDY_alu)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_alu, 1u);
	backing.PORT_RDY_alu = PORT_RDY_alu;
      }
      ++num;
      if ((backing.PORT_alu) != PORT_alu)
      {
	vcd_write_val(sim_hdl, num, PORT_alu, 32u);
	backing.PORT_alu = PORT_alu;
      }
      ++num;
      if ((backing.PORT_alu_a) != PORT_alu_a)
      {
	vcd_write_val(sim_hdl, num, PORT_alu_a, 32u);
	backing.PORT_alu_a = PORT_alu_a;
      }
      ++num;
      if ((backing.PORT_alu_b) != PORT_alu_b)
      {
	vcd_write_val(sim_hdl, num, PORT_alu_b, 32u);
	backing.PORT_alu_b = PORT_alu_b;
      }
      ++num;
      if ((backing.PORT_alu_func) != PORT_alu_func)
      {
	vcd_write_val(sim_hdl, num, PORT_alu_func, 4u);
	backing.PORT_alu_func = PORT_alu_func;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_alu, 1u);
      backing.DEF_CAN_FIRE_alu = DEF_CAN_FIRE_alu;
      vcd_write_val(sim_hdl, num++, PORT_RDY_alu, 1u);
      backing.PORT_RDY_alu = PORT_RDY_alu;
      vcd_write_val(sim_hdl, num++, PORT_alu, 32u);
      backing.PORT_alu = PORT_alu;
      vcd_write_val(sim_hdl, num++, PORT_alu_a, 32u);
      backing.PORT_alu_a = PORT_alu_a;
      vcd_write_val(sim_hdl, num++, PORT_alu_b, 32u);
      backing.PORT_alu_b = PORT_alu_b;
      vcd_write_val(sim_hdl, num++, PORT_alu_func, 4u);
      backing.PORT_alu_func = PORT_alu_func;
    }
}
